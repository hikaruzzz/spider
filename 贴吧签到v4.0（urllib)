'''
贴吧签到
v4.0
2018年6月3日 22时

添加功能：按当前路径创建配置文件

'''

# coding = utf-8

import ssl
import urllib.request
import urllib.parse
import re
import time
import configparser
import random
import os

url_recv_decode = "" # 网页返回数据
user_id = ""
user_name = ""
baData_list = [] # 吧数据
header ={}
conf = configparser.ConfigParser()
cookie = ""
user_agent = ""
path = os.getcwd()


def initialSection(cookies_value, user_agent_value):
    # 初始化，增加cookies和user-agent的value
    # 调用时传入cookies值，返回cookies值

    global conf

    new_section = 'login'
    conf_get = ''

    if cookies_value:
        # 若有传入参数，则执行存入
        fw = open(path + r'\settle_ba_cookies.txt', 'w+')
        try:
            conf.add_section(new_section)
        except:
            pass
        else:
            # 当不存在login域时，存入数据到配置文件

            conf.set(new_section,'User-Agent',user_agent_value)
            conf.write(open(path + r'\settle_ba.ini', 'w+'))
        fw.write(cookies_value)
        fw.close()
        return cookies_value, user_agent_value
    else:
        # 若无传入参数，则读取配置文件并返回
        fr = open(path + r'\settle_ba_cookies.txt', 'r')
        fr_read = fr.read()
        fr.close()
        try:
            conf_get = conf.get(new_section, 'User-Agent')
            #print(fr_read,conf_get)  # for test
        except:
            return fr_read,''
        else:
            return fr_read,conf_get


def loginInAccount():
    # 获取网页返回数据，录入登陆信息，登陆
    # 关闭https验证方法
    global header, url_recv_decode,cookie,user_agent
    ssl._create_default_https_context = ssl._create_unverified_context

    targetUrl = 'https://tieba.baidu.com/index.html'
    print("--------贴吧签到鸡---------")
    print("target url：",targetUrl)
    while True:
        cookie = input("输入网页已登陆cookie (TIPS：请求 URL: https://tieba.baidu.com/ ) ：")
        user_agent = input("输入user_agent（建议输入，防爬？）：")

        cookie, user_agent = initialSection(cookie, user_agent)
        if cookie == '':
            print("cookies文件内容有误，请检查settle_ba_cookies.txt内容")
        else:
            print("cookies文件读取成功")

        header = {
            # cookie在网络框里面找   请求 URL: https://tieba.baidu.com/
            "Cookie": cookie,
            "User-Agent": user_agent
        }

        # 开始登陆（用header方法）
        url_recv = urllib.request.Request(url="https://tieba.baidu.com/index.html",headers=header)  # 返回<urllib.request.Request object at 0x000001B59FB61BA8>文件描述
        url_recv_decode = urllib.request.urlopen(url_recv).read().decode('utf-8')  # 读取文件数据，此处decode()是吧 bytes -->> str
        #print(url_recv_decode)  # for test

        user_id = re.findall('"user_id": "(.*?)".*?"name": "', url_recv_decode)[0]
        if user_id:
            print("\n《《登陆成功》》")
            break
        else:
            print("\n信息错误，请留意不要带“”")


def urlRecvAnalyse(url_recv_decode_temp):
    # 分析数据

    global baData_list,user_id,user_name

    baData_list = re.findall('"forum_id":(.*?),"forum_name":"(.*?)".*?"in_time":(.*?),"level_id":(.*?),',url_recv_decode_temp)
    # baData_list[0][1]是第一个贴吧的id，以此类推，baData_list[0][3]是第一个贴吧的level

    #print("baData_list",baData_list)  # for test
    #print("url_recv_decode",url_recv_decode_temp)  # for test

    user_id, user_name = re.findall('"user_id": "(.*?)".*?"name": "(.*?)"', url_recv_decode_temp)[0]

    return user_id, user_name

def addBaList(baData_list):
    # 把贴吧列表添加到配置文件中

    conf.read(filenames=r'C:\Users\Hikaruzzz\Desktop\test11\settle_ba.ini')

    for newBa in baData_list:
        try:
            conf.add_section(newBa[1])
        except:
            pass

        conf.set(newBa[1], 'ba_id',newBa[0])
        conf.set(newBa[1], 'ba_name', newBa[1])
        conf.set(newBa[1], 'in_time', newBa[2])
        conf.set(newBa[1], 'level', newBa[3])
        conf.set(newBa[1], 'register over', newBa[4])

    conf.write(open(r'C:\Users\Hikaruzzz\Desktop\test11\settle_ba.ini', 'w'))
    print("贴吧信息已保存至settle_ba.ini")


def readBaList(conf):
    # 读取配置文件中的贴吧数据

    global baData_list
    baData_list_new = []
    baData_list_read = conf.sections()

    #print(baData_list_read) # for test
    i = 0
    for baName in baData_list_read:

        if not baName == 'login':
            baData_list_new.append([])
            baData_list_new[i].append(conf.get(baName, 'ba_id'))
            baData_list_new[i].append(conf.get(baName, 'ba_name'))
            baData_list_new[i].append(conf.get(baName, 'in_time'))
            baData_list_new[i].append(conf.get(baName, 'level'))
            baData_list_new[i].append(conf.get(baName, 'register over'))
            i += 1

    baData_list = baData_list_new
    #print(baData_list) # for test


def showBa(baData_list_temp):
    # 处理ba list  ,吧名转中文，添加是否登陆 元素

    global baData_list, url_recv_decode

    user_id, user_name = urlRecvAnalyse(url_recv_decode)
    baData_list_new = []
    print("user_id:", user_id)
    print("user_name:", user_name)
    print("\n--------关注贴吧：---------")
    # 逐个转码 '\\u795e' -->> utf-8中文
    temp = 0
    i = 0
    #print(baData_list) # for test

    for forum_temp in baData_list:
        # 把贴吧名转utf-8

        ba_name = forum_temp[1].encode('utf-8').decode('unicode_escape')
        baData_list_new.append([])
        baData_list_new[i].append(forum_temp[0])
        baData_list_new[i].append(ba_name)
        baData_list_new[i].append(forum_temp[2])
        baData_list_new[i].append(forum_temp[3])
        baData_list_new[i].append('0')
        i += 1

        print(ba_name, "\n关注时间：", shiftTime(int(forum_temp[2])), " LV：",forum_temp[3],"\n")
        temp += 1
        if temp == len(baData_list)/2:
            break

    baData_list = baData_list_new
    #print(baData_list)  # for test
    print("----------------------------")


def registerBa():
    # 签到函数
    global baData_list,header

    fa = input("任意键 开始签到,ctrl+c退出,没反应请多按几下回车")

    print("避免百度反爬虫，设定签到间隔为 2-5秒随机，请耐心等待")
    #print(baData_list)
    for i in range(len(baData_list)):
        if baData_list[i][4] == '0': # 判断今天各贴吧是否已签到
            ba_name_ch = baData_list[i][1]
            # 中文吧名用urllib.parse.quote转码

            kw = ba_name_ch  # str格式
            #print("urlllib.parse.quote:", urllib.parse.quote(kw))  # for test
            ba_url = "http://tieba.baidu.com/f?kw=" + urllib.parse.quote(kw)

            tbs_data = urllib.request.urlopen(urllib.request.Request(url=ba_url, headers=header)).read().decode("utf-8")
            tbs_data_re = re.findall('\'tbs\': "(.*?)"', tbs_data)

            #print("当前贴吧tbs码：", tbs_data_RE[0]) for test

            # 点击签到之后，网络框出现的add值
            url = "http://tieba.baidu.com/sign/add"
            # 请求正文，含有对应贴吧的专属信息
            post_data = {
                "ie": "utf - 8",
                "kw": kw,
                "tbs": tbs_data_re,
            }

            data = urllib.parse.urlencode(post_data).encode("utf-8")
            post_request = urllib.request.Request(url=url, data=data, headers=header)

            # 发送登陆指令
            recv_data = urllib.request.urlopen(post_request).read().decode('utf-8')

            # 返回报文
            re_return = re.findall('"error":"(.*?)",', recv_data)[0]
            # print(recv_data) #打印全报文
            re_return_decode =  re_return.encode('utf-8').decode('unicode_escape')

            if re_return_decode:
                # py3取消了str的decode，所以避免报错需要st.encode('utf-8').decode('unicode_escape'))
                print(ba_name_ch, " 吧，error返回：", re_return_decode)

                if re_return_decode == '亲，你之前已经签过了':
                    baData_list[i][4] = '1'

            else:
                print(ba_name_ch, " 吧 成功签到")
                baData_list[i][4] = '1'
            time.sleep(random.randrange(2, 5))

    print("----------------------------\n签到over")

def shiftTime(timestamp):
    #转换时间戳，返回正常时间
    time_l = time.localtime(timestamp)
    return time.strftime("%Y-%m-%d %H:%M:%S", time_l)


def main():
    global url_recv_decode,user_name,user_id,baData_list,header,conf

    conf.read(filenames=r'C:\Users\Hikaruzzz\Desktop\test11\settle_ba.ini')
    readBaList(conf)  # 读取配置文件中的baData_list信息
    loginInAccount()  # 内嵌存文件函数
    #urlRecvAnalyse(url_recv_decode)
    showBa(baData_list)  # 处理ba list  ,吧名转中文，添加是否登陆 元素
    registerBa()
    addBaList(baData_list)  # 存储数据到配置文件
    input("\n----------------------------\n任意键退出")


if __name__ == '__main__':
    main()
